/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_D_FF_AS_1bit
#(
    parameter Default = 0
)
(
   input Set,
   input D,
   input C,
   input Clr,
   output Q,
   output Q_n
);
    reg state;

    assign Q = state;
    assign Q_n  = ~state;

    always @ (posedge C or posedge Clr or posedge Set)
    begin
        if (Set)
            state <= 1'b1;
        else if (Clr)
            state <= 'h0;
        else
            state <= D;
    end

    initial begin
        state = Default;
    end
endmodule
module DIG_D_FF_Nbit
#(
    parameter Bits = 2,
    parameter Default = 0
)
(
   input [(Bits-1):0] D,
   input C,
   output [(Bits-1):0] Q,
   output [(Bits-1):0] Q_n
);
    reg [(Bits-1):0] state;

    assign Q = state;
    assign Q_n = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module DriverInvBus#(
    parameter Bits = 2
)
(
    input [(Bits-1):0] in,
    input sel,
    output [(Bits-1):0] out
);
    assign out = (sel == 1'b0)? in : {Bits{1'bz}};
endmodule

// 8-Bit Shift Registers with 3-State Output Registers
module \74595  (
  input SER,
  input SCLK,
  input RCLK,
  input OE_n ,
  input CLR_n ,
  input VCC,
  input GND,
  output Q_A,
  output Q_B,
  output Q_C,
  output Q_D,
  output Q_E,
  output Q_F,
  output Q_G,
  output Q_H,
  output Q_H_n
);
  wire Q_H_n_temp ;
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire [7:0] s8;
  wire [7:0] s9;
  wire [7:0] s10;
  assign s0 = ~ CLR_n ;
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i0 (
    .Set( 1'b0 ),
    .D( SER ),
    .C( SCLK ),
    .Clr( s0 ),
    .Q( s1 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i1 (
    .Set( 1'b0 ),
    .D( s1 ),
    .C( SCLK ),
    .Clr( s0 ),
    .Q( s2 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i2 (
    .Set( 1'b0 ),
    .D( s2 ),
    .C( SCLK ),
    .Clr( s0 ),
    .Q( s3 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i3 (
    .Set( 1'b0 ),
    .D( s3 ),
    .C( SCLK ),
    .Clr( s0 ),
    .Q( s4 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i4 (
    .Set( 1'b0 ),
    .D( s4 ),
    .C( SCLK ),
    .Clr( s0 ),
    .Q( s5 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i5 (
    .Set( 1'b0 ),
    .D( s5 ),
    .C( SCLK ),
    .Clr( s0 ),
    .Q( s6 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i6 (
    .Set( 1'b0 ),
    .D( s6 ),
    .C( SCLK ),
    .Clr( s0 ),
    .Q( s7 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i7 (
    .Set( 1'b0 ),
    .D( s7 ),
    .C( SCLK ),
    .Clr( s0 ),
    .Q( Q_H_n_temp  )
  );
  assign s8[0] = s1;
  assign s8[1] = s2;
  assign s8[2] = s3;
  assign s8[3] = s4;
  assign s8[4] = s5;
  assign s8[5] = s6;
  assign s8[6] = s7;
  assign s8[7] = Q_H_n_temp ;
  DIG_D_FF_Nbit #(
    .Bits(8),
    .Default(0)
  )
  DIG_D_FF_Nbit_i8 (
    .D( s8 ),
    .C( RCLK ),
    .Q( s9 )
  );
  DriverInvBus #(
    .Bits(8)
  )
  DriverInvBus_i9 (
    .in( s9 ),
    .sel( OE_n  ),
    .out( s10 )
  );
  assign Q_A = s10[0];
  assign Q_B = s10[1];
  assign Q_C = s10[2];
  assign Q_D = s10[3];
  assign Q_E = s10[4];
  assign Q_F = s10[5];
  assign Q_G = s10[6];
  assign Q_H = s10[7];
  assign Q_H_n  = Q_H_n_temp ;
endmodule
