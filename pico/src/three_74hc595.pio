;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program three_74hc595
.side_set 2             // rclk | srclk     (register clock | serial clock)

; Repeatedly get one word of data from the TX FIFO, stalling when the FIFO is
; empty. Write the least significant bit to the OUT pin group.

.wrap_target

out pins, 3             side 0b10
set x, 6                side 0b01

loop:
    out pins, 3         side 0b00
    jmp x-- loop        side 0b01

.wrap

% c-sdk {

#define NUM_PINS 3
#define NUM_SIDESET 2

static inline void three_74hc595_program_init(PIO pio, uint sm, uint offset, uint pin, uint sidepin) {
    pio_sm_config c = three_74hc595_program_get_default_config(offset);

    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_out_pins(&c, pin, NUM_PINS);
    sm_config_set_sideset_pins(&c, sidepin);
    sm_config_set_out_shift(&c, true, true, 24); // shift_right=false, autopull=true, pull_threshold=24
    sm_config_set_clkdiv(&c, 12.5);

    // Set this pin's GPIO function (connect PIO to the pad)
    for (int i = 0; i < NUM_PINS; i++) {
        pio_gpio_init(pio, pin + i);
    }

    for (int i = 0; i < NUM_SIDESET; i++) {
        pio_gpio_init(pio, sidepin + i);
    }

    // Set the pin direction to output at the PIO
    // true - output, false - input
    pio_sm_set_consecutive_pindirs(pio, sm, pin, NUM_PINS, true);
    pio_sm_set_consecutive_pindirs(pio, sm, sidepin, NUM_SIDESET, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
