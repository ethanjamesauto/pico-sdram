; WIP! WIP! WIP!
; This program drives 3 74HC595 shift registers to control 24 outputs.
.program three_74hc595

; sideset pins - rclk | srclk - (register clock | serial clock)
.side_set 1

; wait 1 gpio 22      side 1      ; TODO: see if it's 1 or 0
wait 0 gpio 22      side 1      ; TODO: see if it's 1 or 0

.wrap_target

start:
out pins, 3         side 1
set x, 4            side 1

loop:
    out pins, 3     side 1
    jmp x-- loop    side 1

out pins, 3         side 1
out pc, 5           side 1
; nop side 1

read_write:
out pins, 3         side 0
irq set 7           side 0
.wrap

no_read_write:
out pins, 3         side 0
jmp start           side 0

% c-sdk {
 
#include "src/config.h"

#define NUM_PINS 3
#define NUM_SIDESET 1

static inline void three_74hc595_program_init(PIO pio, uint sm, uint offset, uint pin, uint sidepin) {
    pio_sm_config c = three_74hc595_program_get_default_config(offset);

    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_out_pins(&c, pin, NUM_PINS);
    sm_config_set_sideset_pins(&c, sidepin);
    sm_config_set_out_shift(&c, false, true, 24 + 5); // shift_right=true, autopull=true, pull_threshold=24
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // TODO: maybe reconsider?
    sm_config_set_clkdiv(&c, CLKDIV);

    // Set this pin's GPIO function (connect PIO to the pad)
    for (int i = 0; i < NUM_PINS; i++) {
        pio_gpio_init(pio, pin + i);
    }

    for (int i = 0; i < NUM_SIDESET; i++) {
        pio_gpio_init(pio, sidepin + i);
    }

    // Set the pin direction to output at the PIO
    // true - output, false - input
    pio_sm_set_consecutive_pindirs(pio, sm, pin, NUM_PINS, true);
    pio_sm_set_consecutive_pindirs(pio, sm, sidepin, NUM_SIDESET, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    // pio_sm_set_enabled(pio, sm, true);
}
%}
