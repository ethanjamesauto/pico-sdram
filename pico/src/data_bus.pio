;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program data_bus

wait 0 gpio 22
wait 1 gpio 22              [6]

.wrap_target

out pins, 16            [15]

.wrap

% c-sdk {

#include "src/config.h"

#define BUS_WIDTH 16

static inline void data_bus_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = data_bus_program_get_default_config(offset);

    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_out_pins(&c, pin, BUS_WIDTH);
    sm_config_set_out_shift(&c, true, true, 32); // shift_right=true, autopull=true, pull_threshold=32
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // TODO: maybe reconsider?
    sm_config_set_clkdiv(&c, CLKDIV);

    // Set this pin's GPIO function (connect PIO to the pad)
    for (int i = 0; i < BUS_WIDTH; i++) {
        pio_gpio_init(pio, pin + i);
    }

    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, BUS_WIDTH, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    // pio_sm_set_enabled(pio, sm, true);
}
%}
